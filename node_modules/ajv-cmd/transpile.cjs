var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transpile_exports = {};
__export(transpile_exports, {
  default: () => transpile_default,
  transpile: () => transpile
});
module.exports = __toCommonJS(transpile_exports);
var import_node_path = require("node:path");
var import_node_url = require("node:url");
var import_promises = require("node:fs/promises");
var import_node_crypto = require("node:crypto");
var import_compile = require("./compile.js");
var import_standalone = __toESM(require("ajv/dist/standalone/index.js"), 1);
var import_esbuild = require("esbuild");
const import_meta = {};
const __dirname = (0, import_node_path.dirname)((0, import_node_url.fileURLToPath)(import_meta.url));
const defaultOptions = {
  code: {
    esm: true,
    source: true
    // required to create string of code
  }
};
const transpile = async (schema, options = {}) => {
  options = { ...defaultOptions, ...options };
  const ajv = (0, import_compile.instance)(options);
  const validate = (0, import_compile.compile)(schema, options);
  let js = (0, import_standalone.default)(ajv, validate);
  const file = (0, import_node_path.join)(__dirname, (0, import_node_crypto.randomBytes)(16).toString("hex") + ".js");
  await (0, import_promises.writeFile)(file, js, "utf8");
  await (0, import_esbuild.build)({
    entryPoints: [file],
    platform: "node",
    format: "esm",
    bundle: true,
    minify: true,
    legalComments: "none",
    allowOverwrite: true,
    outfile: file
  });
  js = await (0, import_promises.readFile)(file, { encoding: "utf8" });
  await (0, import_promises.unlink)(file);
  return js;
};
var transpile_default = transpile;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transpile
});
